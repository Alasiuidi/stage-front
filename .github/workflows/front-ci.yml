name: Build & Deploy (front)

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'angular.json'
      - 'package*.json'
      - 'dockerfile'
      - 'nginx.conf'
      - 'helm/front/**'
      - '.github/workflows/front-ci.yml'
  workflow_dispatch:

concurrency:
  group: front-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_REPO: alasuidi01/quiz-ui
  CHART_DIR: helm/front/front
  RELEASE: quiz-ui
  NAMESPACE: default
  APP_NAME: fronttest
  KUBECONFIG: /root/.kube/config

permissions:
  contents: read
  packages: write

jobs:
  build-and-deploy:
    runs-on: [self-hosted, Linux, X64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show tool versions
        run: |
          docker --version
          microk8s helm version
          microk8s kubectl version --client=true

      - name: Docker login (Docker Hub)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push image
        run: |
          TAG=${GITHUB_SHA::7}
          docker build \
            --build-arg APP_NAME=${APP_NAME} \
            -t ${IMAGE_REPO}:${TAG} \
            -t ${IMAGE_REPO}:latest \
            .
          docker push ${IMAGE_REPO}:${TAG}
          docker push ${IMAGE_REPO}:latest
          echo "TAG=${TAG}" >> $GITHUB_ENV

      # âœ… Modified to use microk8s helm + kubectl
      - name: Helm upgrade/install
        run: |
          # sanity: kubectl access
          microk8s kubectl get ns

          # install/upgrade release
          microk8s helm upgrade --install ${RELEASE} ${CHART_DIR} \
            --namespace ${NAMESPACE} \
            --create-namespace \
            --set image.repository=${IMAGE_REPO} \
            --set image.tag=${{ env.TAG }} \
            --wait --timeout 5m

      - name: Show front pods & service
        run: |
          microk8s kubectl get pods -n ${NAMESPACE} -l app=${RELEASE} -o wide
          microk8s kubectl get svc -n ${NAMESPACE}
          microk8s kubectl get ingress -n ${NAMESPACE} || true
